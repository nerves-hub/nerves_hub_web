#!/usr/bin/env bash

if [ ! -f ./remote_host ]; then
  cat << "HELP"
Before using this script, you need an ssh config file with `nerves_hub` as the host.

Below is a sample file to place at `./remote_host`. Please update with your login details.

```
Host nerves_hub
  HostName 127.0.0.1
  User deploy
  Port 22
```
HELP

  exit 1
fi

git_branch="HEAD"
deploy_user=$(cat ./remote_host | grep User | sed 's/User //' | sed 's/\s*//')
ssh_options=(nerves_hub -F ./remote_host -o "ControlMaster=auto" -o "ControlPath=~/.ssh/ssh_mux_%h_%p_%r" -o "ControlPersist=600" -o "LogLevel=QUIET")

function header() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
  printf "\e[1;36m%s\e[0m\n" "${1}"
}

help_text=$(cat <<"HELP"
remote - Help manage remote nodes

  ./bin/remote [command]

Commands:

bash    Start a remote bash shell

deploy  Deploy `origin/main`

help    View this help message

iex     Start a remote IEx shell

logs    Tail logs from a remote server

psql    Start a remote psql connection
HELP
)

case "${1}" in
  bash)
    ssh "${ssh_options[@]}" -t -C 'export $(cat /etc/nerves_hub.env | xargs) && bash'
    ;;

  setup)
    cat deploy/nerves_hub.service | sed "s/deploy/${deploy_user}/" >> /tmp/nerves_hub.service

    scp -F ./remote_host deploy/nerves_hub.env nerves_hub:/tmp/nerves_hub.env
    scp -F ./remote_host /tmp/nerves_hub.service nerves_hub:/tmp/nerves_hub.service

    commands=$(cat << CMD
# caddy
sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
sudo apt-get update

# fwup
sudo wget https://github.com/fwup-home/fwup/releases/download/v1.10.0/fwup_1.10.0_amd64.deb -P /tmp/
sudo dpkg -i /tmp/fwup_1.10.0_amd64.deb

sudo apt-get install -y xdelta3 caddy postgresql unzip

sudo mv /tmp/nerves_hub.env /etc/nerves_hub.env
sudo mv /tmp/nerves_hub.service /etc/systemd/system/nerves_hub.service
sudo systemctl daemon-reload
sudo systemctl enable nerves_hub
CMD
)

    ssh "${ssh_options[@]}" -t -C "${commands}"

    cat << NOTICE
Setup complete. There are still a few TODOs before this server is ready to deploy.

- Create a postgresql deploy user
- Fill in /etc/nerves_hub.env with your keys and secrets.
- Generate certs, make sure the following are present
  - /etc/ssl/{host}-key.pem
  - /etc/ssl/{host}.pem
- Edit /etc/caddy/Caddyfile to use your domain

Create a postgresql user with:
$ sudo -u postgres createdb nerveshub
$ sudo -u postgres createuser --superuser deploy
$ sudo -u postgres psql
$ [psql] alter role deploy with password 'password';

You can generate a cert with:

$ openssl genrsa -out ca.key 2048
$ openssl req -x509 -new -nodes -key ca.key -sha256 -days 1825 -out ca.pem -subj '/OU=NervesHub/'
$ openssl genrsa -out device.nerves-hub.org-key.pem
$ openssl req -new -key device.nerves-hub.org-key.pem -out device.nerves-hub.org.csr -subj '/CN=device.nerves-hub.org/'
$ nvim device.nerves-hub.org.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = device.nerves-hub.org
$ openssl x509 -req -in device.nerves-hub.org.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out device.nerves-hub.org.pem -days 825 -sha256 -extfile device.nerves-hub.org.ext
$ sudo mv device.nerves-hub.org-key.pem /etc/ssl/
$ sudo mv device.nerves-hub.org.pem /etc/ssl/

Edit Caddyfile to include your domain
$ nvim /etc/caddy/Caddyfile
nerves-hub.org {
	reverse_proxy http://localhost:4000
}

NOTICE

    ;;

  deploy)
    set -e

    header "Creating erlang release"
    ./bin/release

    header "Copying file to server"
    scp -F ./remote_host tmp/nerves_hub.tar.gz nerves_hub:/tmp/nerves_hub.tar.gz

    now="$(date +%s)"
    sha="$(git rev-parse ${git_branch})"
    release_path="/home/${deploy_user}/nerves_hub/releases/${now}"
    current_path="/home/${deploy_user}/nerves_hub/current"

    header "Creating release at ${release_path}"
    ssh "${ssh_options[@]}" -t -C "mkdir -p ${release_path}"
    ssh "${ssh_options[@]}" -t -C "tar xzf /tmp/nerves_hub.tar.gz -C ${release_path}"
    ssh "${ssh_options[@]}" -t -C "echo ${sha} > ${release_path}/REVISION"

    header "Stopping NervesHub"
    ssh "${ssh_options[@]}" -t -C "sudo systemctl stop nerves_hub"
    ssh "${ssh_options[@]}" -t -C "rm -f ${current_path}"
    ssh "${ssh_options[@]}" -t -C "ln -s ${release_path} ${current_path}"

    header "Migrating"
    ssh "${ssh_options[@]}" -t -C 'cd nerves_hub/current && export $(cat /etc/nerves_hub.env | xargs) && ./bin/nerves_hub eval "NervesHub.Release.Tasks.migrate()"'

    header "Starting NervesHub"
    ssh "${ssh_options[@]}" -t -C 'sudo systemctl start nerves_hub'

    header "Deploy complete"

    ;;

  iex)
    ssh "${ssh_options[@]}" -t -C "cd nerves_hub/current && ./bin/nerves_hub remote"
    ;;

  logs)
    ssh "${ssh_options[@]}" -t -C 'journalctl -u nerves_hub -f'
    ;;

  psql)
    ssh "${ssh_options[@]}" -t -C 'source /etc/nerves_hub.env && psql $DATABASE_URL'
    ;;

  *)
    echo "${help_text}"
    ;;
esac
