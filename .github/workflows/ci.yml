name: Test + Docker

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:
  pull_request:

jobs:
  compile-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 14

    permissions:
      contents: read
      packages: read

    env:
      FWUP_VERSION: "1.10.1"
      MIX_ENV: "test"
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/nerves_hub_test

    services:
      db:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install system deps
        run: |
          wget https://github.com/fwup-home/fwup/releases/download/v${FWUP_VERSION}/fwup_${FWUP_VERSION}_amd64.deb
          sudo dpkg -i fwup_1.10.1_amd64.deb && rm fwup_1.10.1_amd64.deb

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt != '1'
        run: |
          mix deps.clean --all
          mix clean
        shell: sh

      - name: Install dependencies
        run: mix deps.get

      - name: Compiles without warnings
        run: mix compile --warnings-as-errors

      - name: Check Formatting
        run: mix format --check-formatted

      - name: Check for unused dependencies
        run: mix deps.unlock --unused

      - name: DB Setup
        run: mix ecto.migrate.reset

      - name: Run tests
        run: mix test

  build-and-publish:
    runs-on: ubuntu-latest

    needs: compile-and-test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true
        with:
          images: ghcr.io/nerves-hub/nerves-hub
          tags: |
            # short sha
            type=sha,prefix=,suffix=,format=short
            # branch image names, except for main
            type=ref,enable=${{ github.ref != format('refs/heads/{0}', 'main') }},event=branch
            # latest tag for main branch
            type=raw,enable={{is_default_branch}},value=latest
            # tag event (eg. "v1.2.3")
            type=ref,event=tag

      - name: Check if PR publish
        continue-on-error: true
        if: ${{ github.event_name == 'pull_request' }}
        id: pr_publish_check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          commits=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[] | .messageHeadline + " " + .messageBody')

          if [[ $commits =~ \[publish\] ]]; then
            echo "true"
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "false"
            echo "publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: ${{ steps.pr_publish_check.outputs.publish == 'true' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref_type == 'tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
