<h1>New Certificate Authority</h1>

<.form :let={f} for={@form} phx-submit="add_certificate_authority" phx-change="validate_new_certificate_authority">
  <div :if={f.action && !Keyword.has_key?(f.errors, :serial)} class="alert alert-danger">
    <p>Something went wrong! Please check the errors below.</p>
  </div>

  <div :if={Keyword.has_key?(f.errors, :serial)} class="alert alert-danger">
    <p>A Certificate Authority with the same Serial already exists.</p>
  </div>

  <h3>Step 1</h3>
  <p>Generate a key pair for the private key verification certificate</p>
  <pre><code class="shell" phx-hook="HighlightCode" id={"step-1"}>
  $ openssl genrsa -out verificationCert.key 2048
  </code></pre>

  <h3>Step 2</h3>
  <p>Copy this registration code to your clipboard</p>
  <pre id="registration_code"><code class="plaintext pl-4" phx-hook="HighlightCode" id={"step-2"}>
  <%= @registration_code %>
  </code></pre>

  <h3>Step 3</h3>
  <p>Create a CSR with this registration code</p>
  <pre><code class="shell" phx-hook="HighlightCode" id={"step-3"}>
  $ openssl req -new -key verificationCert.key -out verificationCert.csr
  </code></pre>

  <p>Put the registration code in the <b> Common Name </b> field</p>
  <pre><code class="plaintext" phx-hook="HighlightCode" id={"step-3-details"}>
  Country Name (2 letter code) [AU]:
  State or Province Name (full name) [Some-State]:
  Locality Name (eg, city) []:
  Organization Name (eg, company) [Internet Widgits Pty Ltd]:
  Organizational Unit Name (eg, section) []:
  Common Name (e.g. server FQDN or YOUR name) []: <%= @registration_code %>
  Email Address []:
  </code></pre>

  <p>Or you can do this in one line with</p>
  <pre><code class="shell" phx-hook="HighlightCode" id={"step-3-alt"}>
  $ openssl req -new -key verificationCert.key -out verificationCert.csr \
      -subj /CN=<%= @registration_code %>
  </code></pre>

  <h3>Step 4</h3>
  <p>Use the CSR that was signed with the CA private key to create a private key verification certificate</p>
  <pre><code class="shell" phx-hook="HighlightCode" id={"step-4"}>
  $ openssl x509 -req -in verificationCert.csr \
      -CA rootCA.pem -CAkey rootCA.key -CAcreateserial \
      -out verificationCert.crt -days 500 -sha256
  </code></pre>

  <div class="form-group">
    <%= label(f, :description, for: "description_input") %>
    <%= text_input(f, :description, class: "form-control", id: "description_input") %>
    <div class="has-error"><%= error_tag(f, :description) %></div>
  </div>

  <div class="form-group">
    <div class="help-text mb-1 tooltip-label help-tooltip">
      <%= label(f, :check_expiration, for: "check_expiration_input") %>
      <CAHelpers.check_expiration_tooltip />
    </div>
    <%= checkbox(f, :check_expiration, class: "", id: "check_expiration_input") %>
    <div class="has-error"><%= error_tag(f, :check_expiration) %></div>
  </div>

  <%= inputs_for f, :jitp, fn fp -> %>
    <label for="jitp_toggle_ui"> Enable Just In Time Provisioning </label>
    <input id="jitp_toggle" type="hidden" name="ca_certificate[jitp][jitp_toggle]" value="false" checked={@show_jitp_form} />
    <input id="jitp_toggle_ui" type="checkbox" name="ca_certificate[jitp][jitp_toggle]" value="true" checked={@show_jitp_form} phx-click={JS.dispatch("ca:new:jitp")} } />
    <div class={unless @show_jitp_form, do: "hidden"} id="jitp_form">
      <div class="form-group">
        <div class="tooltip-label mb-1">
          <label for="jitp_description_input" class="h3">
            JITP Description
          </label>
          <span class="tooltip-info mb-1"></span>
          <span class="tooltip-text">Device Description</span>
        </div>
        <%= text_input(fp, :description, class: "form-control", id: "jitp_description_input") %>
        <div class="has-error"><%= error_tag(fp, :description) %></div>
      </div>

      <div class="form-group">
        <div class="tooltip-label mb-1">
          <label for="tag_input" class="h3">
            JITP Tags
          </label>
          <span class="tooltip-info mb-1"></span>
          <span class="tooltip-text">Tags are used by deployments to target a device. A device must have matching tag(s) for the deployment to update it</span>
        </div>
        <%= text_input(fp, :tags, class: "form-control", id: "tag_input") %>
        <div class="has-error"><%= error_tag(fp, :tags) %></div>
      </div>

      <div class="form-group">
        <div class="tooltip-label mb-1">
          <label for="product_input" class="h3">
            JITP Product
          </label>
          <span class="tooltip-info mb-1"></span>
          <span class="tooltip-text">JITP must be configured to use a particular product</span>
        </div>
        <%= select(fp, :product_id, Enum.map(@products, &{&1.name, &1.id}), class: "form-control", id: "product_input", prompt: "Select Product") %>
        <div class="has-error"><%= error_tag(fp, :product_id) %></div>
      </div>
    </div>
  <% end %>

  <div class="form-group custom-upload-group">
    <%= if Enum.any?(@uploads.cert.entries) do %>
      <label class="custom-upload-label selected" for={@uploads.cert.ref}>
        Selected File:
        <div class="file-name"><%= Enum.map(@uploads.cert.entries, fn e -> e.client_name end) %></div>
      </label>
    <% else %>
      <label class="custom-upload-label not-selected" for={@uploads.cert.ref}>Upload a Certificate Authority file (rootCA.pem)</label>
    <% end %>
    <.live_file_input upload={@uploads.cert} required />
    <%= for entry <- @uploads.cert.entries do %>
      <div :for={err <- upload_errors(@uploads.cert, entry)} class="alert alert-danger">
        <%= upload_error_to_string(err) %>
      </div>
    <% end %>
  </div>

  <div class="form-group custom-upload-group">
    <%= if Enum.any?(@uploads.csr.entries) do %>
      <label class="custom-upload-label selected" for={@uploads.csr.ref}>
        Selected File:
        <div class="file-name"><%= Enum.map(@uploads.csr.entries, fn e -> e.client_name end) %></div>
      </label>
    <% else %>
      <label class="custom-upload-label not-selected" for={@uploads.csr.ref}>Upload a Certificate Authority file (verificationCert.crt)</label>
    <% end %>
    <.live_file_input upload={@uploads.csr} required />
    <%= for entry <- @uploads.csr.entries do %>
      <div :for={err <- upload_errors(@uploads.csr, entry)} class="alert alert-danger">
        <%= upload_error_to_string(err) %>
      </div>
    <% end %>
  </div>

  <div class="button-submit-wrapper">
    <.link id="back-button" class="btn btn-outline-light" patch={~p"/org/#{@org.name}/settings/certificates"}>Cancel</.link>
    <%= submit("Create Certificate", class: "btn btn-primary") %>
  </div>
</.form>
